
// One dimensional Ising line of fixed size
function ising_closed(numSites, spinPrior, affinity)
{
	var sites = new Int32Array(numSites)
	// Priors
	for (var i = 0; i < numSites; i++)
		sites[i] = flip(spinPrior, false) ? 1 : -1
	// Factors
	for (var i = 0; i < numSites-1; i++)
		factor(affinity*sites[i]*sites[i+1])
	return sites
}

// One dimensional Ising line of variable size
function ising_open(numPrior, spinPrior, affinity)
{
	var numSites = poisson(numPrior, true)
	return ising_closed(numSites, spinPrior, affinity)
}

///////////////////////////////////////

function GMM(size)
{
	var obj = {}
	//obj.weights = new Float64Array(size)
	obj.means = new Float64Array(size)
	obj.stddevs = new Float64Array(size)
	return obj
}

// Sample from a mixture of gaussians with known number of components
function gmm_sample(model)
{
	var which = multinomial(model.weights, false)
	return gaussian(model.means, model.stddevs, false)
}
// Do the same as above, but constrain the output of the gaussian
function gmm_sample_conditioned(model, val)
{
	var which = multinomial(model.weights, false)
	return gaussian(model.means, model.stddevs, false, val)
}

// Train the parameters of a mixture of gaussians using some data
function gmm_train(meanPriorMean, meanPriorSD, stddevPriorAlpha, stddevPriorBeta, weightPriors, data)
{
	var model = GMM(weightPriors.length)
	model.weights = new Float64Array(dirichlet(weightPriors, false))
	for (var i = 0; i < model.means.length; i++)
		model.means[i] = gaussian(meanPriorMean, meanPriorSD, false)
	for (var i = 0; i < model.stddevs.length; i++)
		model.stddevs[i] = 1.0/gamma(stddevPriorAlpha, stddevPriorBeta, false)
	for (var i = 0; i < data.length; i++)
		gmm_sample_conditioned(model, data[i])
	return model
}

///////////////////////////////////////

// MCMC
var samples = 5000

// Ising Examples
var isingNumSites = 1000
var isingNumPrior = 1000
var isingSitePrior = 0.5
var isingAffinity = 2.0

// GMM Examples
var numDataPoints = 1000
var sourceModel = GMM(3)
var trainingData = new Float64Array(numDataPoints)
var weightPriors = new Float64Array([0.33, 0.33, 0.33])
var meanPriorMean = 0.0
var meanPriorSD = 3.0
var stddevPriorAlpha = 2.0
var stddevPriorBeta = 2.0
function setupGMMGlobals()
{
	sourceModel.weights = new Float64Array([0.1, 0.3, 0.6])
	sourceModel.means = new Float64Array([0.0, -5.7, 9.6])
	sourceModel.stddevs = new Float64Array([0.5, 1.1, 0.2])
	for (var i = 0; i < numDataPoints; i++)
		trainingData[i] = gmm_sample(sourceModel)
}


///////////////////////////////////////

function runTest(name, computation)
{
	var d0 = new Date()
	traceMH(computation, samples)
	var d1 = new Date()
	console.log(name + ": " + ((d1.getTime() - d0.getTime())/1000) + " seconds")
}

///////////////////////////////////////

runTest(
"Ising Line (Closed-Universe)",
function()
{
	return ising_closed(isingNumSites, isingNumPrior, isingAffinity)
})

runTest(
"Ising Line (Open-Universe)",
function()
{
	return ising_open(isingNumPrior, isingNumPrior, isingAffinity)
})

setupGMMGlobals()
runTest(
"Train GMM",
function()
{
	return gmm_train(meanPriorMean, meanPriorSD, stddevPriorAlpha, stddevPriorBeta,
					 weightPriors, trainingData)
})

runTest(
"Medical Diagnosis Bayes Net",
function()
{
	var worksInHospital = flip(0.01)
	var smokes = flip(0.2)

	var lungCancer = flip(0.01) || (smokes && flip(0.02))
	var TB = flip(0.005) || (worksInHospital && flip(0.01))
	var cold = flip(0.2) || (worksInHospital && flip(0.25))
	var stomachFlu = flip(0.1)
	var other = flip(0.1)

	var cough = (cold && flip(0.5)) || (lungCancer && flip(0.3)) || (TB && flip(0.7)) || (other && flip(0.01))
	var fever = (cold && flip(0.3)) || (stomachFlu && flip(0.5)) || (TB && flip(0.2)) || (other && flip(0.01))
	var chestPain = (lungCancer && flip(0.4)) || (TB && flip(0.5)) || (other && flip(0.01))
	var shortnessOfBreath = (lungCancer && flip(0.4)) || (TB && flip(0.5)) || (other && flip(0.01))

	condition(cough && chestPain && shortnessOfBreath)

	return [lungCancer, TB]
})





